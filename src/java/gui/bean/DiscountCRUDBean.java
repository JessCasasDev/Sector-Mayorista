/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.bean;

/**
 *
 * @author JuanCamilo
 */
import businessLogic.controller.DiscountCRUD;
import dataSourceManagement.DAO.DiscountDAO;
import dataSourceManagement.DAO.VehicleDAO;
import dataSourceManagement.entities.Discount;
import dataSourceManagement.entities.ShopOrder;
import dataSourceManagement.entities.Vehicle;
import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.faces.event.ValueChangeEvent;

@ManagedBean
@ViewScoped
public class DiscountCRUDBean implements Serializable{

    //Generated by Map
    private Map<String, Integer> availableVehicles;

    //Generated by Map
    private Map<String, Integer> availableDiscounts;
    
    private Integer selectedVehicleId;
    private Integer selectedDiscountId;
    private String expirationDate;
    private String description;
    private Float percentage;
    private ShopOrder shopOrderOrderId;
    private Vehicle vehicleId;
    private SimpleDateFormat sdf;
    private Integer day;
    private Integer month;
    private Integer year;
    private String message;
    private String show;
    
    public DiscountCRUDBean() {
        selectedVehicleId = -1;
        selectedDiscountId = -1;
        sdf = new SimpleDateFormat("dd-M-yyyy");
        show = "hide";
    }
    
    public Integer getDay() {
        return day;
    }
    
    public void setDay(Integer day) {
        this.day = day;
    }
    
    public String getMessage() {
        return message;
    }
    
    public void setMessage(String message) {
        this.message = message;
    }
    
    public Integer getMonth() {
        return month;
    }
    
    public void setMonth(Integer month) {
        this.month = month;
    }
    
    public Integer getYear() {
        return year;
    }
    
    public void setYear(Integer year) {
        this.year = year;
    }
    
    public String getExpirationDate() {
        return expirationDate;
    }
    
    public void setExpirationDate(String expirationDate) {
        this.expirationDate = expirationDate;
    }
    
    public String getDescription() {
        return description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }
    
    public Float getPercentage() {
        return percentage;
    }
    
    public void setPercentage(Float percentage) {
        this.percentage = percentage;
    }
    
    public ShopOrder getShopOrderOrderId() {
        return shopOrderOrderId;
    }
    
    public SimpleDateFormat getSdf() {
        return sdf;
    }
    
    public void setSdf(SimpleDateFormat sdf) {
        this.sdf = sdf;
    }
    
    public String getShow() {
        return show;
    }
    
    public void setShow(String show) {
        this.show = show;
    }
    
    public void setShopOrderOrderId(ShopOrder shopOrderOrderId) {
        this.shopOrderOrderId = shopOrderOrderId;
    }
    
    public Vehicle getVehicleId() {
        return vehicleId;
    }
    
    public void setVehicleId(Vehicle vehicleId) {
        this.vehicleId = vehicleId;
    }
    
    public Integer getSelectedDiscountId() {
        return selectedDiscountId;
    }
    
    public void setSelectedDiscountId(Integer selectedDiscountId) {
        this.selectedDiscountId = selectedDiscountId;
    }
    
    public Map<String, Integer> getAvailableVehicles() {
        availableVehicles = new LinkedHashMap<>();
        VehicleDAO vdao = new VehicleDAO();
        List<Vehicle> vehicles = vdao.findVehicleEntities();
        for (Vehicle v : vehicles) {
            availableVehicles.put(v.getLabel(), v.getVehicleId());
        }
        return availableVehicles;
    }
    
    public Map<String, Integer> getAvailableDiscounts() {
        availableDiscounts = new LinkedHashMap<>();
        DiscountCRUD discountCRUD = new DiscountCRUD();
        List<Discount> discounts = discountCRUD.findDiscountEntities();
        for (Discount d : discounts) {
            availableDiscounts.put(d.getLabel(), d.getDiscountId());
        }
        return availableDiscounts;
    }
    
    public Integer getSelectedVehicleId() {
        return selectedVehicleId;
    }
    
    public void setSelectedVehicleId(Integer selectedVehicleId) {
        this.selectedVehicleId = selectedVehicleId;
    }
    
    public void createDiscount() {
        DiscountCRUD discountCRUD = new DiscountCRUD();
        try {
            Discount discount = new Discount();
            discount.setDescription(getDescription());
            System.out.println("Discount date: " + expirationDate);
            Date date = this.setDateTime(day, month, year);
            discount.setExpirationDate(date);
            discount.setPercentage(getPercentage());
            Vehicle selectedVehicle = getSelectedVehicle();
            if (selectedVehicle == null) {
                setMessage("any selected vehicle");
                return;
            }
            discount.setDiscountAmount(selectedVehicle.getSellPrice() * getPercentage());
            discount.setVehicleId(selectedVehicle);
            discountCRUD.createDiscount(discount);
            setMessage("Discount created: " + discount.getLabel());
        } catch (Exception e) {
            setMessage(e.toString());
        }
    }
    
    public void editDiscount() {
        DiscountCRUD discountCRUD = new DiscountCRUD();
        if (selectedVehicleId == -1) {
            setMessage("any selected discount");
            return;
        }
        try {
            Discount edited = getSelectedDiscount();
            String key = edited.getLabel();
            edited.setDescription(getDescription());
            Date date = this.setDateTime(day, month, year);
            edited.setExpirationDate(date);
            edited.setPercentage(getPercentage());
            Vehicle selectedVehicle = getSelectedVehicle();
            if (selectedVehicle == null) {
                setMessage("any selected vehicle");
                return;
            }
            edited.setVehicleId(selectedVehicle);
            edited.setDiscountAmount(selectedVehicle.getSellPrice() * getPercentage());
            discountCRUD.editDiscount(edited);
            availableDiscounts.remove(key);
            availableDiscounts.put(edited.getLabel(), edited.getDiscountId());
            setMessage("Discount edited: " + edited.getLabel());
        } catch (Exception e) {
            setMessage(e.toString());
        }
    }
    
    public void deleteDiscount() {
        DiscountCRUD deleteCRUD = new DiscountCRUD();
        if (selectedDiscountId == -1) {
            setMessage("any selected discount");
            return;
        }
        Discount deletedDiscount = getSelectedDiscount();
        String key = deletedDiscount.getLabel();
        deleteCRUD.deleteDiscount(getSelectedDiscountId());
        availableDiscounts.remove(key);
        setMessage("Discount removed : " + deletedDiscount.getLabel());
    }
    
    private Vehicle getSelectedVehicle() {
        VehicleDAO vdao = new VehicleDAO();
        return vdao.findVehicle(getSelectedVehicleId());
    }
    
    @Override
    public String toString() {
        return "Selected v " + selectedVehicleId
                + " description " + description;
    }
    
    private Discount getSelectedDiscount() {
        DiscountDAO vdao = new DiscountDAO();
        return vdao.findDiscount(getSelectedDiscountId());
    }
    
    public void fillDiscountData(ValueChangeEvent e) {
        Calendar c = new GregorianCalendar();
        setSelectedDiscountId(Integer.parseInt(e.getNewValue().toString()));
        Discount selected = getSelectedDiscount();
        System.out.println("discount to fill " + selected.getLabel());
        this.setDescription(selected.getDescription());
        this.setPercentage(selected.getPercentage());
        this.setSelectedVehicleId(selected.getVehicleId().getVehicleId());
        c.setTime(selected.getExpirationDate());
        this.setDay(c.get(Calendar.DAY_OF_MONTH));
        this.setMonth(c.get(Calendar.MONTH) + 1);
        this.setYear(c.get(Calendar.YEAR));
        setShow("");
        FacesContext.getCurrentInstance().renderResponse();
    }
    
    public List<Discount> getDiscounts() {
        DiscountCRUD dis = new DiscountCRUD();
        return dis.findDiscountEntities();
    }
    
    public Date setDateTime(int day, int month, int year) throws ParseException {
        String s_day = String.valueOf(day);
        String s_month = String.valueOf(month);
        String s_year = String.valueOf(year);
        String dateInString = s_day + "-" + s_month + "-" + s_year + " 23:59:59";
        Date date = sdf.parse(dateInString);
        return date;
    }
    
}
